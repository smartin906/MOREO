---
/** HeroImage.astro — full-bleed image hero with dark/light overlay + PNG/SVG logo
 *  - Forwards arbitrary attrs (incl. style) to <section>
 *  - Logo size uses CSS var fallbacks so your overrides work
 */
interface Props {
  title: string;
  subtitle?: string;

  imageSrc: string;
  imageAlt?: string;
  objectPosition?: string;                 // e.g., "center 40%"

  overlaySide?: "left" | "right" | "top" | "bottom";
  overlayWidth?: string;                   // "70vw" (left/right) or "60vh" (top/bottom)
  overlayTone?: "dark" | "light";          // overlay palette

  /* Logo above H1 — choose ONE */
  logoSvg?: string;                        // RAW SVG markup (import ...?raw)
  logoImgSrc?: string;                     // PNG/WebP/JPG path (e.g., "/media/logo.png")
  logoImgAlt?: string;

  logoAlign?: "center" | "left" | "right";
  tintLogo?: boolean;                      // SVG only: force to currentColor

  /* Optional typed sizing overrides (alt to style="--logo-*") */
  logoMin?: string;    // e.g., "140px"
  logoIdeal?: string;  // e.g., "28vw"
  logoMax?: string;    // e.g., "460px"

  class?: string;                           // extra classes (e.g., "full-bleed")
}

const {
  title, subtitle,
  imageSrc, imageAlt = "", objectPosition = "center",
  overlaySide = "left", overlayWidth = "70vw", overlayTone = "dark",
  logoSvg, logoImgSrc, logoImgAlt = "Logo", logoAlign = "center", tintLogo = false,
  logoMin, logoIdeal, logoMax,
  class: klass = "",
  ...rest
} = Astro.props as Props & Record<string, any>;

/* Build optional CSS vars from typed props; merge with any passed style attr */
const sizeVars = [
  logoMin   && `--logo-min:${logoMin}`,
  logoIdeal && `--logo-ideal:${logoIdeal}`,
  logoMax   && `--logo-max:${logoMax}`,
].filter(Boolean).join(";") || undefined;

const mergedRest = { ...rest, ...(sizeVars ? { style: `${sizeVars}${rest.style ? `;${rest.style}` : ""}` } : {}) };
---
<section class={`hero ${klass}`} data-tone={overlayTone} {...mergedRest}>
  <!-- Background image -->
  <img
    class="hero__image"
    src={imageSrc}
    alt={imageAlt}
    width="1920"
    height="1080"
    loading="eager"
    fetchpriority="high"
    decoding="async"
    style={`object-position:${objectPosition};`}
  />

  <!-- Partial gradient overlay -->
  <div
    class="hero__overlay"
    data-side={overlaySide}
    style={`--overlay-width:${overlayWidth};`}
    aria-hidden="true"
  ></div>

  <!-- Content -->
  <div class="wrap hero__content" data-align={logoAlign}>
    <div class={`hero__logo ${tintLogo ? "tint-current" : ""}`}>
      {
        logoImgSrc
          ? <img class="hero__logoImg" src={logoImgSrc} alt={logoImgAlt} decoding="async" loading="eager" />
          : (logoSvg
              ? <span class="hero__logoSvg" set:html={logoSvg} />
              : null
            )
      }
    </div>

    <h1 class="hero__title">{title}</h1>
    {subtitle && <p class="hero__subtitle">{subtitle}</p>}
  </div>

  <style>
    .hero {
      position: relative;
      width: 100%;
      min-height: clamp(52vh, 52vh + 8vw, 80vh);
      display: grid;
      align-items: end;
      overflow: clip;
      isolation: isolate;

      /* DARK tone defaults */
      --ovr-a: rgba(15,23,42,.86);
      --ovr-b: rgba(15,23,42,.65);
      --title-color: #e2e8f0;
      --subtitle-color: #94a3b8;
      --logo-color: #e2e8f0;
    }

    /* LIGHT (white) tone overrides */
    .hero[data-tone="light"] {
      --ovr-a: rgba(255,255,255,.92);
      --ovr-b: rgba(255,255,255,.60);
      --title-color: #0b1220;
      --subtitle-color: #334155;
      --logo-color: #0b1220;
    }

    /* full-bleed helper (apply via class="full-bleed") */
    .full-bleed { position: relative; left:50%; right:50%; margin-left:-50vw; margin-right:-50vw; width:100vw; overflow:clip; }
    @supports (width: 100svw) { .full-bleed { width:100svw; margin-left:calc(50% - 50svw); margin-right:calc(50% - 50svw); } }

    /* background image */
    .hero__image { position:absolute; inset:0; width:100%; height:100%; object-fit:cover; max-width:none; margin: 0%;}

    /* overlay */
    .hero__overlay { position:absolute; inset:0; pointer-events:none; width:100%; height:100%; --angle:90deg; }
    .hero__overlay::before {
      content:""; position:absolute; inset:0;
      width: var(--overlay-width, 70vw); height:100%;
      background: linear-gradient(var(--angle), var(--ovr-a), var(--ovr-b) 60%, rgba(0,0,0,0) 100%);
    }
    .hero__overlay[data-side="right"]  { --angle:270deg; }
    .hero__overlay[data-side="top"]    { --angle:180deg; }
    .hero__overlay[data-side="bottom"] { --angle:0deg; }
    .hero__overlay[data-side="top"]::before,
    .hero__overlay[data-side="bottom"]::before { width:100%; height:var(--overlay-width,60vh); }

    /* content + logo */
    .hero__content { position:relative; z-index:1; padding-block:clamp(2rem, 6vh, 4rem); text-align:center; }
    .hero__content[data-align="left"]  { text-align:left; }
    .hero__content[data-align="right"] { text-align:right; }

    .hero__logo { display:grid; place-items:center; margin:0 0 1rem; color: var(--logo-color); }

    /* ✅ Use fallbacks so your overrides work via style/props */
    .hero__logoSvg :where(svg) {
      width: clamp(var(--logo-min, 120px), var(--logo-ideal, 24vw), var(--logo-max, 360px));
      height:auto; display:block; max-width:100%;
    }
    .tint-current :where(svg *) { fill: currentColor !important; stroke: currentColor !important; }

    .hero__logoImg {
      display:block; max-width:50%; height:auto;
      width: clamp(var(--logo-min, 120px), var(--logo-ideal, 24vw), var(--logo-max, 360px));
      object-fit: contain; image-rendering: -webkit-optimize-contrast;
    }

    .hero__title   { margin:0 0 .4rem; font-size:clamp(1.9rem, 1.2rem + 3vw, 3.1rem); color: var(--title-color); letter-spacing:.2px; }
    .hero__subtitle{ margin:0; color: var(--subtitle-color); font-size:clamp(1rem, .95rem + .5vw, 1.25rem); max-width:60ch; margin-inline:auto; }
  </style>
</section>
